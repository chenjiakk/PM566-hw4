---
title: "Hw4"
author: "Chenjia Kuang"
format: html
editor: visual
embed-resources: true
---

## **HPC**

### **Make things run faster**

Rewrite the following R functions to make them faster. It is OK (and recommended) to take a look at StackOverflow and Google

```{r}
# Total row sums
fun1 <- function(mat) {
  n <- nrow(mat)
  ans <- double(n) 
  for (i in 1:n) {
    ans[i] <- sum(mat[i, ])
  }
  ans
}

fun1alt <- function(mat) {
  rowSums(mat)
}

# Cumulative sum by row
fun2 <- function(mat) {
  n <- nrow(mat)
  k <- ncol(mat)
  ans <- mat
  for (i in 1:n) {
    for (j in 2:k) {
      ans[i,j] <- mat[i, j] + ans[i, j - 1]
    }
  }
  ans
}

fun2alt <- function(mat) {
  ans2 <- as.data.table(t(mat))
  ans2 <- cumsum(ans2)
  ans2 <- t(ans2)
  ans2
}
```

### **Question 1**

Using the dataset generated below (`dat`), check that the output of both of your new functions matches the output of the original functions. Then use `microbenchmark` to check that your version is actually faster.

```{r}
# Use the data with this code
set.seed(2315)
dat <- matrix(rnorm(200 * 100), nrow = 200)

# Test for the first
microbenchmark::microbenchmark(
  fun1(dat),
  fun1alt(dat), unit = "relative"
)

# Test for the second
microbenchmark::microbenchmark(
  fun2(dat),
  fun2alt(dat), unit = "relative"
)
```

### **Make things run faster with parallel computing**

The following function allows simulating pi:

```{r}
sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n*2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

# Here is an example of the run
set.seed(156)
sim_pi(1000) # 3.132
```

In order to get accurate estimates, we can run this function multiple times, with the following code:

```{r}
# This runs the simulation a 4,000 times, each with 10,000 points
set.seed(1231)
system.time({
  ans <- unlist(lapply(1:4000, sim_pi, n = 10000))
  print(mean(ans))
})
```

### **Question 2**

Rewrite the previous code using `parLapply()` (or your parallelization method of choice) to parallelize it. Run the code once, using `system.time()`, to show that your version is faster.

```{r}
cluster <- makeCluster(4L)
clusterSetRNGStream(cluster,iseed = 1111)
system.time({
  ans <- unlist(parLapply(cluster, 1:4000, sim_pi, n=1000))
  print(mean(ans))
})

stopCluster(cluster)
```

## **SQL**

Setup a temporary database by running the following chunk

```{r}
# install.packages(c("RSQLite", "DBI"))

library(RSQLite)
library(DBI)

# Initialize a temporary in memory database
con <- dbConnect(SQLite(), ":memory:")

# Download tables
film <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film.csv")
film_category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film_category.csv")
category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/category.csv")

# Copy data.frames to database
dbWriteTable(con, "film", film)
dbWriteTable(con, "film_category", film_category)
dbWriteTable(con, "category", category)
```

## **Question 3**

How many movies are available in each `rating` category?

```{sql connection=con }
SELECT rating,
  COUNT (film_id) AS Counts
FROM film
GROUP BY rating
```

There are 180 movies available in G rating category, 210 in NC-17, 194 in PG, 223 in PG-13, and 195 in R category.

## **Question 4**

What is the average replacement cost and rental rate for each `rating` category?

```{sql connection=con }
SELECT rating,
  AVG(replacement_cost) AS avg_replcement,
  AVG(rental_rate) AS avg_rental
FROM film
GROUP BY rating
```

The average replacement cost is 20.12333 and average rental rate is 2.912222 in G category.

The average replacement cost is 20.13762 and average rental rate is 2.970952 in NC-17 category.

The average replacement cost is 18.95907 and average rental rate is 3.051856 in PG category.

The average replacement cost is 20.40256 and average rental rate is 3.034842 in PG-13 category.

The average replacement cost is 20.23103 and average rental rate is 2.938718 in R category.

## **Question 5**

Use table `film_category` together with `film` to find how many films there are with each category ID.

```{sql connection=con }
SELECT category_id,
  COUNT (*) AS Counts
FROM film AS f
  INNER JOIN film_category AS c
ON f.film_id = c.film_id
GROUP BY category_id
```

There are 64 films in category ID 1, 66 films in category ID 2, 60 films in category ID 3, 57 films in category ID 4, 58 films in category ID 5, 68 films in category ID 6, 62 films in category ID 7, 69 films in category ID 8, 73 films in category ID 9, and 61 films in category ID 10.

## **Question 6**

Incorporate the `category` table into the answer to the previous question to find the name of the most popular category.

```{sql connection=con }
SELECT film_category.category_id,category.name,
  COUNT(*) AS count
FROM film_category
  INNER JOIN film ON film_category.film_id=film.film_id
  INNER JOIN category ON film_category.category_id=category.category_id
GROUP BY category.category_id
ORDER BY count DESC
```

The most popular category is sports.
